pipeline {
    agent {
        docker {
            image 'abhishekf5/maven-abhishek-docker-agent:v1'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    environment {
        SONAR_URL = "http://52.91.154.38:9000"
        DOCKER_IMAGE = "aadeleke12/ultimate-cicd:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
        GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
        GIT_USER_NAME = "aadetunji12"
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Performing Git Checkout...'
                // Add your Git checkout commands here
            }
        }

        stage('Build and Test') {
            steps {
                dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                    echo 'Building and Testing...'
                    sh 'ls -ltr'
                    sh 'mvn clean package'
                }
            }
        }

        stage('Static Code Analysis') {
            steps {
                dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                    echo 'Running Static Code Analysis...'
                    withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_AUTH_TOKEN')]) {
                        sh "mvn sonar:sonar -Dsonar.login=${SONAR_AUTH_TOKEN} -Dsonar.host.url=${SONAR_URL}"
                    }
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                    echo 'Building and Pushing Docker Image...'
                    sh "docker build -t ${DOCKER_IMAGE} ."
                    docker.withRegistry('https://index.docker.io/v1/', 'docker_hub') {
                        docker.image("${DOCKER_IMAGE}").push()
                    }
                }
            }
        }

        stage('Update Deployment File') {
            steps {
                withCredentials([string(credentialsId: 'git', variable: 'GITHUB_TOKEN')]) {
                    echo 'Updating Deployment File...'
                    gitAddCommitAndPush()
                }
            }
        }
    }
}

def gitAddCommitAndPush() {
    dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
        echo 'Configuring Git and Updating Deployment File...'
        sh '''
            git config user.email
